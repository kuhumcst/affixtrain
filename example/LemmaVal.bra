{LemmaVal.bra

Given rules and the training data (or other full form - lemma data, plus
additional info like POS tags), produce the lemmas of the full forms and
compare those with the lemmas in the training data. Write errors in a file.

This Bracmat script uses another Bracmat script, "lemmatize.bra", which must
be in the same location.

You need to install Bracmat to run this script. See

https://github.com/BartJongejan/Bracmat

===============================================================================
Comments about the code
-------------------------------------------------------------------------------
Flexrules: the path (relative or full) to the file that contains lemmatization
rules in Bracmat format. The rules should be trained WITHOUT using Part Of
Speech tags. You can create Bracmat-formatted rules as follows:

prompt> affixtrain -n FB00 -i MyTrainingdata
prompt> affixtrain -b 0/flexrules.MyTrainingdata_XC

The second command creates the files 
    0/flexrules.MyTrainingdata_XC.pretty.bra
and 
    0/flexrules.MyTrainingdata_XC.pretty.txt
You need the first of these two files.
-------------------------------------------------------------------------------
WordLemmaPosData-file-name: the path (relative or full) to a TAB separated file
that has a column with words, a column with the lemmas of those words, and a
column with PoS tags. There may be more columns, but those will be ignored.
This can be the same file with which the flex rules were trained. (In which
case you only should have used the columns with words and with lemmas.)
-------------------------------------------------------------------------------
WordLemmaPosData-layout: This is a pattern that tells the program how a line in
the file described above is built up. The pattern must contain the pattern
variables ?word ?lemma and ?class. Write \t for a tab, and write ? for matching
anything. A ? that is the last pattern component matches everything up to the
end of the line, also any tab characters. To skip a single column, write 
    \t ? \t 	
Other separators than tabs can be used, e.g. a semicolon, a single space or a
vertical bar. Write these characters between quotes, otherwise they are
interpreted in a way you do not want.
-------------------------------------------------------------------------------
}

X=
  ( 
  .   (Flexrules="0/flexrules.short_XC.pretty.bra")
      (WordLemmaPosData-file-name=short)
      (WordLemmaPosData-layout=?word \t ?lemma \t ?class \t ?)
  .   ( Flexrules
      = "C:/projects/affixtrain/da/0/flexrules.STOposUTF8.ph__XC.pretty.bra"
      )
      ( WordLemmaPosData-file-name
      = "C:/projects/affixtrain/da/STOposUTF8.ph"
      )
      (WordLemmaPosData-layout=?word \t ?lemma \t ?class)
  )
  ( doit
  =     createIndexFile denum lemmatise theTree
      , CLS ERRORS H Index IndexFile
      , R RES TheFlexRules WLCfile WordLemmaPosData
      , cls k nr nrs plinepat
      , t0 t1 word wrd
    .   !arg:(?TheFlexRules.?WordLemmaPosData.?plinepat)
      & ( denum
        =   b
          .   !arg:#%*?arg&!arg
            | !arg:(?b.?arg)&(!b.denum$!arg)
            |   !arg:?arg_?b
              & (denum$!arg)_(denum$!b)
            | !arg
        )
      & ( createIndexFile
        =     H word lems Lems results wlcs ress lm
            , nrs A Z cls nr nnr CLS ERRORS IndexFile
            , createWLCfile WLCfile WordLemmaPosData plinepat
          .   !arg:(?WordLemmaPosData.?plinepat.?IndexFile.?WLCfile)
            & ( createWLCfile
              =   WLC WLP WordLemmaPosData linepat
                .     !arg:(?WordLemmaPosData.(=?linepat))
                    & new$hash:?WLC
                    & get$(!WordLemmaPosData,STR,TXT):?WLP
                    & !( 
                       '   vap
                         $ ( ( 
                             =   word lemma class
                               .     @(!arg:$linepat)
                                   & ( @(!word:? " " ?)
                                     |   (WLC..insert)
                                       $ (!word.!lemma.!class)
                                     )
                                   & 
                                 | 
                             )
                           . $WLP
                           . \n
                           )
                       )
                    & out$read
                    & :?wlcs
                    &   (WLC..forall)
                      $ ( 
                        =   wrd r1 r2 A L,C1 M C2 Z
                          .   !arg:(?wrd.?r1) ?arg
                            &   whl
                              ' ( !arg:(!wrd.?r2) ?arg
                                & !r2 !r1:?r1
                                )
                            & ( !arg:
                              | WHAT? !arg \n !ERRORS:?ERRORS
                              )
                            &   whl
                              ' (   !r1
                                  :   ?A
                                      (?L.?C1)
                                      ?M
                                      (!L.?C2)
                                      ?Z
                                & !A (!L.!C1+!C2) !M !Z:?r1
                                )
                            & denum$!r1:?r1
                            & (!wrd.!r1) !wlcs:?wlcs
                        )
                    & lst$(wlcs,!WLCfile,NEW)
                    & !wlcs
                  |     out
                      $ ( str
                        $ ("Cannot open " !WordLemmaPosData " for reading.")
                        )
                    & ~
              )
            & (   ~
                & get$!WLCfile
                & out$(got !WLCfile)
              | createWLCfile$(!WordLemmaPosData.!plinepat):?wlcs
              )
            & new$hash:?H
            &   whl
              ' ( !wlcs:(?word.?lems:?Lems) ?wlcs
                &   lemmatise$(!theTree.!word..0)
                  : ?results
                  : ?ress
                &   whl
                  ' ( !results:(?lm.?nrs) ?results
                    & !lems:?A (!lm.?cls) ?Z
                    & !A !Z:?lems
                    &   whl
                      ' ( !nrs:%?nr ?nrs
                        & (   (H..find)$!nr:(?nnr.?CLS)
                            & (H..remove)$!nr
                          | 0:?CLS
                          )
                        & (H..insert)$(!nr.!CLS+!cls)
                        )
                    )
                & ( !lems:!results:
                  |   (!word.!ress.!Lems.!lems.!results) !ERRORS
                    : ?ERRORS
                  )
                )
            & :?Index
            & out$AAAA
            & (H..forall)$out
            & (H..forall)$(=.!arg !Index:?Index)
            & lst$(Index,!IndexFile,NEW)
            & !H
        )
      & get$"lemmatize.bra"
      & str$(!TheFlexRules "Index.bra"):?IndexFile
      & str$(!TheFlexRules "WLC.bra"):?WLCfile
      & get$!TheFlexRules:?theTree
      & :?ERRORS
      & (   
          & get$!IndexFile
          & new$hash:?H
          &   whl
            ' (!Index:%?k ?Index&(H..insert)$!k)
        |   clk$:?t0
          &     createIndexFile
              $ (!WordLemmaPosData.!plinepat.!IndexFile.!WLCfile)
            : ?H
          & clk$:?t1
          & out$(T flt$(!t1+-1*!t0,4) s)
          & (   !ERRORS:
              & (rmv$"ERRORS.bra"|)
            | lst$(ERRORS,"ERRORS.bra",NEW)
            )
        )
      & out$"Type word and press ENTER. To stop, just press ENTER."
      &   whl
        ' ( get':~:?word
          & lemmatise$(!theTree.!word..0):?R
          & :?RES
          &   whl
            ' ( !R:(?wrd.?nrs) ?R
              & 0:?CLS
              &   whl
                ' ( !nrs:%?nr ?nrs
                  & (H..find)$!nr:(?.?cls)
                  & !CLS+!cls:?CLS
                  )
              & !RES (!wrd.!CLS):?RES
              )
          & out$(!word ":" !RES)
          )
      & BYE
      & done
  )
  ( new
  =   
    .   (its.doit)
      $ ( !(its.Flexrules)
        . !(its.WordLemmaPosData-file-name)
        . '$(its.WordLemmaPosData-layout)
        )
  );

r=
  get'("LemmaVal.bra",TXT)
& rmv$(str$(LemmaVal ".bak"))
& ren$("LemmaVal.bra".str$(LemmaVal ".bak"))
&   put
  $ ( "{LemmaVal.bra

Given rules and the training data (or other full form - lemma data, plus
additional info like POS tags), produce the lemmas of the full forms and
compare those with the lemmas in the training data. Write errors in a file.

This Bracmat script uses another Bracmat script, \"lemmatize.bra\", which must
be in the same location.

You need to install Bracmat to run this script. See

https://github.com/BartJongejan/Bracmat

===============================================================================
Comments about the code
-------------------------------------------------------------------------------
Flexrules: the path (relative or full) to the file that contains lemmatization
rules in Bracmat format. The rules should be trained WITHOUT using Part Of
Speech tags. You can create Bracmat-formatted rules as follows:

prompt> affixtrain -n FB00 -i MyTrainingdata
prompt> affixtrain -b 0/flexrules.MyTrainingdata_XC

The second command creates the files 
    0/flexrules.MyTrainingdata_XC.pretty.bra
and 
    0/flexrules.MyTrainingdata_XC.pretty.txt
You need the first of these two files.
-------------------------------------------------------------------------------
WordLemmaPosData-file-name: the path (relative or full) to a TAB separated file
that has a column with words, a column with the lemmas of those words, and a
column with PoS tags. There may be more columns, but those will be ignored.
This can be the same file with which the flex rules were trained. (In which
case you only should have used the columns with words and with lemmas.)
-------------------------------------------------------------------------------
WordLemmaPosData-layout: This is a pattern that tells the program how a line in
the file described above is built up. The pattern must contain the pattern
variables ?word ?lemma and ?class. Write \\t for a tab, and write ? for matching
anything. A ? that is the last pattern component matches everything up to the
end of the line, also any tab characters. To skip a single column, write 
    \\t ? \\t 	
Other separators than tabs can be used, e.g. a semicolon, a single space or a
vertical bar. Write these characters between quotes, otherwise they are
interpreted in a way you do not want.
-------------------------------------------------------------------------------
}

"
    , "LemmaVal.bra"
    , NEW
    , BIN
    )
& lst'(X,"LemmaVal.bra",APP)
& put'(\n,"LemmaVal.bra",APP,BIN)
& lst'(r,"LemmaVal.bra",APP)
& put$(str$("\nnew'" X ";\n"),"LemmaVal.bra",APP,BIN)
& ;

new'X;
